1) Plain definition + overview
2) Why do we care?
3) Examples
4) When to use this?

Basic types in TS:
# Type    -> Easy way to refer to the different properties + functions that a value has
# Value     -> Is anything that we can assign to a variable

> Primitive_Type:    number, string, boolean, symbol, void, null, undefined
> Object_Type:       functions, classes, arrays, objects
---
> Types are used by the TS compiler to analyze our code for errors.
> Types allow other engineers to understand what values are flowing around our codebase.


Type annotations in action:
# Type annotations    -> Code we add to tell the TS what type of value a variable will refer to
# Type inference      -> TS tries to figure out what type of value a variable refers to

> Type Inference: if Variable declaration and Variable initialization are on the same line (same expression), TS will figure out the type of the variable for us

# Type Annotations, when to use:
> When a function returns the 'any' type and we need to clarify it
> When we declare a variable on one line then initialize it later
> When we want a variable to have a type that can't be inferred

 -----
'false'              -> JSON.parse() ->    boolean    
'4'                  -> JSON.parse() ->    number    
'{"value":5}'        -> JSON.parse() ->    {value: number}    
'{"name": "alex"}'   -> JSON.parse() ->    {name: string}    
-----
> any   -> is a type, just as 'string' or 'boolean' are
        -> means TS has no idea what this is - can't check for correct property references
        -> avoid variables with 'any' at all costs
-----
# Type annotations for functions:
> code we add to tell TS what type of arguments a function will receive and what type of vales it will return
# Type inference for functions:
> type inference only works around the return value of a function
-----

# Typed Arrays -> Arrays where each element is some consistent type of value
> TS can do type inference when extracting values from an arrays
> TS can prevent us from from adding incompatible values to the array
> we can get help with 'map', 'forEach', 'reduce' functions
> Flexible - arrays can still contain multiple different types

# Where to use typed arrays? --> Any time we need to represent a collection of with some arbitrary sort order

# Tuples -> Array-like structure where each element represents some property of a record
Object representing a 'drink':
  color       -> brown
  carbonated  -> true
  sugar       -> 40

[brown, true, 40] -> we'e lost the labels in this case
                  -> the ordering part is critical

-----
# Interfaces -> creates a new type, describing the property names and value types of an object
> we can use a single interface to describe the shape of very different objects

# General Strategy for Reusable Code in TS:
> Create functions that accept arguments that are types with interfaces
> Objects/classes can decide to 'implement' a given interface to work with a function

# Classes -> blueprint to create an object with some fields(values) and methods(functions) to represent a 'thing'

# modifiers: 
> public -> this method can be called any where, any time
> private -> this method can only be called by other methods in this class
> protected -> this method can be called by other methods in this class, or by other methods in child classes

-------
npm install faker@5.5.3
npm install @types/faker@5.5.9

Community fork of Faker:

https://github.com/faker-js/faker

npm install @faker-js/faker

import faker from '@faker-js/faker';

As of their v6 release, TS support is now native and does not require installing the @types declarations.

----------

> tsc --init

"outDir": "./build",  
"rootDir": "./src",

> tsc 
# watch -> continuously compile the code
> tsc -w

------
automate the build and run process:

npm i nodemon concurrently

"scripts": {
    "start:build": "tsc -w",
    "start:run": "nodemon build/index.js",
    "start": "concurrently npm:start:*"
  },

------
# Bubble Sort -> double nested for loop
sort(): void {
    // bubble sort algorithm
    const { length } = this.collection;
    for (let i = 0; i < length; i++) {
      for (let j = 0; j < length - i - 1; j++) {
        if (this.collection[j] > this.collection[j + 1]) {
          const leftHand = this.collection[j];
          this.collection[j] = this.collection[j + 1];
          this.collection[j + 1] = leftHand;
        }
      }
    }
  }

> the swapping logic from above is not gonna work with characters
# Strings in JavaScript are immutable -> we cannot change a character inside a string
> Index signature in type string only permits reading
> Remember that the |, union operator, TS behind the scenes is going to restrict the properties that we can access on the resulting type, so you'll only be able to access the properties that are common to both of them

> We can make use of type guards to lift the restrictions imposed by the union operator: 
# if (typeof this.collection === 'string') {}
# if (this.collection instanceof Array) {}

> Use typeof      -> to narrow type of a value to a primitive type: number, string, boolean, symbol
> Use instanceof  -> narrow down every other type of value that is created with a constructor function: Array, Object etc

------

# Abstract class
> Cannot be used to create an object directly
> Only used as a parent class
> Can contain real implementation for some methods
> The implemented methods can refer to other methods that don't actually exists yet (we still have to provide names and types for the un-implemented methods)
> Can make child classes promise to implement some other methods

------
export abstract class Sorter {
  abstract compare(leftIndex: number, rightIndex: number): boolean;
  abstract swap(leftIndex: number, rightIndex: number): void;
  abstract length: number;
.....

# if the child class doesn't define a constructor we don't have to call super

Recap:
# Interfaces: 
> Sets up a contract between different classes
> Use when we have very different objects that we want to work together
> Promotes loose coupling

# Inheritance/Abstract classes:
> Sets up a contract between different classes
> Use when we are trying to build up a definition of an object
> Strongly couples classes together